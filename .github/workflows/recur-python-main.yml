# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: RECUR Python package

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
      - "dev-*"
      - "feat/**"
    paths-ignore:
      - './README.md'
      - './LICENSE'
      - './DEVNOTES.md'
      - './CONTRIBUTING.md'
      - './CONDUCT.md'
  pull_request:
    branches: 
      - "main"
      - "dev-*"
      - "feat/**"
    types:
      - opened
    paths-ignore:
      - ".github/workflows/*"

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Get Code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test screen printout
      run: python recur.py

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install mypy pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Add iqtree2 to PATH
      run: echo "$(pwd)/src/recur/bin" >> $GITHUB_PATH
    - name: Ensure iqtree2 is executable
      run: chmod +x src/recur/bin/iqtree2
    - name: Test with mypy
      run: mypy src/
    - name: Run on ExampleData
      run: python3 recur.py -f ExampleData -st AA --outgroups ExampleData
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with: 
        name: ExampleData-Output-${{ matrix.python-version }}
        path: ExampleData/
    - name: Get artifacts
      uses: actions/download-artifact@v4
      with: 
        name: ExampleData-Output-${{ matrix.python-version }}
        path: ExampleData/
    - name: Output contents
      run: |
        ls -al
        ls -al ExampleData/
    - name: Test with pytest
      run: |
        pytest -sv tests/
    - name: Commit and Push changes
      env:
        GITHUB_TOKEN: ${{ secrets.MY_PAT }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add badge-status.json
        git commit -m "Update badge status"
        git push origin main
            
    - name: Update badge status to passing
      if: ${{ success() }}
      run: |
        echo '{"schemaVersion": 1, "label": "Tested", "message": "passing", "color": "brightgreen"}' > badge-status.json
        git add badge-status.json
        git commit -m "Update badge status to passing"
        git push

    - name: Update badge status to failing
      if: ${{ failure() }}
      run: |
        echo '{"schemaVersion": 1, "label": "Tested", "message": "failing", "color": "red"}' > badge-status.json
        git add badge-status.json
        git commit -m "Update badge status to failing"
        git push